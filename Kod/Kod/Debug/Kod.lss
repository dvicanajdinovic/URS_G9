
Kod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  00800060  000004a2  00000536  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008000d8  008000d8  000005ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011fd  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008df  00000000  00000000  000018e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000830  00000000  00000000  000021c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  000029f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a6  00000000  00000000  00002bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000831  00000000  00000000  00003062  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003893  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3d       	cpi	r26, 0xD8	; 216
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 ed       	ldi	r26, 0xD8	; 216
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3e       	cpi	r26, 0xE2	; 226
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 18 02 	call	0x430	; 0x430 <main>
  8a:	0c 94 4f 02 	jmp	0x49e	; 0x49e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  92:	82 b3       	in	r24, 0x12	; 18
  94:	80 68       	ori	r24, 0x80	; 128
  96:	82 bb       	out	0x12, r24	; 18
  98:	00 c0       	rjmp	.+0      	; 0x9a <toggle_e+0x8>
  9a:	82 b3       	in	r24, 0x12	; 18
  9c:	8f 77       	andi	r24, 0x7F	; 127
  9e:	82 bb       	out	0x12, r24	; 18
  a0:	08 95       	ret

000000a2 <lcd_write>:
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	d8 2f       	mov	r29, r24
  a8:	66 23       	and	r22, r22
  aa:	21 f0       	breq	.+8      	; 0xb4 <lcd_write+0x12>
  ac:	82 b3       	in	r24, 0x12	; 18
  ae:	80 62       	ori	r24, 0x20	; 32
  b0:	82 bb       	out	0x12, r24	; 18
  b2:	03 c0       	rjmp	.+6      	; 0xba <lcd_write+0x18>
  b4:	82 b3       	in	r24, 0x12	; 18
  b6:	8f 7d       	andi	r24, 0xDF	; 223
  b8:	82 bb       	out	0x12, r24	; 18
  ba:	82 b3       	in	r24, 0x12	; 18
  bc:	8f 7b       	andi	r24, 0xBF	; 191
  be:	82 bb       	out	0x12, r24	; 18
  c0:	81 b3       	in	r24, 0x11	; 17
  c2:	8f 60       	ori	r24, 0x0F	; 15
  c4:	81 bb       	out	0x11, r24	; 17
  c6:	c2 b3       	in	r28, 0x12	; 18
  c8:	c0 7f       	andi	r28, 0xF0	; 240
  ca:	8d 2f       	mov	r24, r29
  cc:	82 95       	swap	r24
  ce:	8f 70       	andi	r24, 0x0F	; 15
  d0:	8c 2b       	or	r24, r28
  d2:	82 bb       	out	0x12, r24	; 18
  d4:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
  d8:	df 70       	andi	r29, 0x0F	; 15
  da:	dc 2b       	or	r29, r28
  dc:	d2 bb       	out	0x12, r29	; 18
  de:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
  e2:	cf 60       	ori	r28, 0x0F	; 15
  e4:	c2 bb       	out	0x12, r28	; 18
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <lcd_read>:
  ec:	88 23       	and	r24, r24
  ee:	21 f0       	breq	.+8      	; 0xf8 <lcd_read+0xc>
  f0:	82 b3       	in	r24, 0x12	; 18
  f2:	80 62       	ori	r24, 0x20	; 32
  f4:	82 bb       	out	0x12, r24	; 18
  f6:	03 c0       	rjmp	.+6      	; 0xfe <lcd_read+0x12>
  f8:	82 b3       	in	r24, 0x12	; 18
  fa:	8f 7d       	andi	r24, 0xDF	; 223
  fc:	82 bb       	out	0x12, r24	; 18
  fe:	82 b3       	in	r24, 0x12	; 18
 100:	80 64       	ori	r24, 0x40	; 64
 102:	82 bb       	out	0x12, r24	; 18
 104:	81 b3       	in	r24, 0x11	; 17
 106:	80 7f       	andi	r24, 0xF0	; 240
 108:	81 bb       	out	0x11, r24	; 17
 10a:	82 b3       	in	r24, 0x12	; 18
 10c:	80 68       	ori	r24, 0x80	; 128
 10e:	82 bb       	out	0x12, r24	; 18
 110:	00 c0       	rjmp	.+0      	; 0x112 <lcd_read+0x26>
 112:	90 b3       	in	r25, 0x10	; 16
 114:	92 95       	swap	r25
 116:	90 7f       	andi	r25, 0xF0	; 240
 118:	82 b3       	in	r24, 0x12	; 18
 11a:	8f 77       	andi	r24, 0x7F	; 127
 11c:	82 bb       	out	0x12, r24	; 18
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_read+0x34>
 120:	82 b3       	in	r24, 0x12	; 18
 122:	80 68       	ori	r24, 0x80	; 128
 124:	82 bb       	out	0x12, r24	; 18
 126:	00 c0       	rjmp	.+0      	; 0x128 <lcd_read+0x3c>
 128:	80 b3       	in	r24, 0x10	; 16
 12a:	8f 70       	andi	r24, 0x0F	; 15
 12c:	22 b3       	in	r18, 0x12	; 18
 12e:	2f 77       	andi	r18, 0x7F	; 127
 130:	22 bb       	out	0x12, r18	; 18
 132:	89 2b       	or	r24, r25
 134:	08 95       	ret

00000136 <lcd_waitbusy>:
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	0e 94 76 00 	call	0xec	; 0xec <lcd_read>
 13c:	88 23       	and	r24, r24
 13e:	dc f3       	brlt	.-10     	; 0x136 <lcd_waitbusy>
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_waitbusy+0xe>
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	0e 94 76 00 	call	0xec	; 0xec <lcd_read>
 14e:	08 95       	ret

00000150 <lcd_command>:
 150:	cf 93       	push	r28
 152:	c8 2f       	mov	r28, r24
 154:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_waitbusy>
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	8c 2f       	mov	r24, r28
 15c:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_write>
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <lcd_gotoxy>:
 164:	61 11       	cpse	r22, r1
 166:	04 c0       	rjmp	.+8      	; 0x170 <lcd_gotoxy+0xc>
 168:	80 58       	subi	r24, 0x80	; 128
 16a:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
 16e:	08 95       	ret
 170:	80 54       	subi	r24, 0x40	; 64
 172:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
 176:	08 95       	ret

00000178 <lcd_clrscr>:
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
 17e:	08 95       	ret

00000180 <lcd_putc>:
 180:	cf 93       	push	r28
 182:	c8 2f       	mov	r28, r24
 184:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_waitbusy>
 188:	ca 30       	cpi	r28, 0x0A	; 10
 18a:	49 f4       	brne	.+18     	; 0x19e <lcd_putc+0x1e>
 18c:	80 34       	cpi	r24, 0x40	; 64
 18e:	10 f4       	brcc	.+4      	; 0x194 <lcd_putc+0x14>
 190:	80 e4       	ldi	r24, 0x40	; 64
 192:	01 c0       	rjmp	.+2      	; 0x196 <lcd_putc+0x16>
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	80 58       	subi	r24, 0x80	; 128
 198:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
 19c:	04 c0       	rjmp	.+8      	; 0x1a6 <lcd_putc+0x26>
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	8c 2f       	mov	r24, r28
 1a2:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_write>
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <lcd_puts>:
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	fc 01       	movw	r30, r24
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <lcd_puts+0xe>
 1b2:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_putc>
 1b6:	fe 01       	movw	r30, r28
 1b8:	ef 01       	movw	r28, r30
 1ba:	21 96       	adiw	r28, 0x01	; 1
 1bc:	80 81       	ld	r24, Z
 1be:	81 11       	cpse	r24, r1
 1c0:	f8 cf       	rjmp	.-16     	; 0x1b2 <lcd_puts+0x8>
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1c8:	1f 93       	push	r17
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	18 2f       	mov	r17, r24
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 1d0:	81 b3       	in	r24, 0x11	; 17
 1d2:	8f 60       	ori	r24, 0x0F	; 15
 1d4:	81 bb       	out	0x11, r24	; 17
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1d6:	81 b3       	in	r24, 0x11	; 17
 1d8:	80 62       	ori	r24, 0x20	; 32
 1da:	81 bb       	out	0x11, r24	; 17
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1dc:	81 b3       	in	r24, 0x11	; 17
 1de:	80 64       	ori	r24, 0x40	; 64
 1e0:	81 bb       	out	0x11, r24	; 17
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1e2:	81 b3       	in	r24, 0x11	; 17
 1e4:	80 68       	ori	r24, 0x80	; 128
 1e6:	81 bb       	out	0x11, r24	; 17
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1e8:	80 e3       	ldi	r24, 0x30	; 48
 1ea:	93 e7       	ldi	r25, 0x73	; 115
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <lcd_init+0x24>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1f0:	82 b3       	in	r24, 0x12	; 18
 1f2:	82 60       	ori	r24, 0x02	; 2
 1f4:	82 bb       	out	0x12, r24	; 18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1f6:	82 b3       	in	r24, 0x12	; 18
 1f8:	81 60       	ori	r24, 0x01	; 1
 1fa:	82 bb       	out	0x12, r24	; 18
    lcd_e_toggle();
 1fc:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 200:	80 ef       	ldi	r24, 0xF0	; 240
 202:	93 e2       	ldi	r25, 0x23	; 35
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 208:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 20c:	c5 e7       	ldi	r28, 0x75	; 117
 20e:	d0 e0       	ldi	r29, 0x00	; 0
 210:	ce 01       	movw	r24, r28
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 216:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 21a:	ce 01       	movw	r24, r28
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <__EEPROM_REGION_LENGTH__+0x1c>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 220:	82 b3       	in	r24, 0x12	; 18
 222:	8e 7f       	andi	r24, 0xFE	; 254
 224:	82 bb       	out	0x12, r24	; 18
    lcd_e_toggle();
 226:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 22a:	21 97       	sbiw	r28, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <__EEPROM_REGION_LENGTH__+0x2a>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 22e:	88 e2       	ldi	r24, 0x28	; 40
 230:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 234:	88 e0       	ldi	r24, 0x08	; 8
 236:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 23a:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 23e:	86 e0       	ldi	r24, 0x06	; 6
 240:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 244:	81 2f       	mov	r24, r17
 246:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>

}/* lcd_init */
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	1f 91       	pop	r17
 250:	08 95       	ret

00000252 <get_char>:
	strcpy(password, temporary_password);
	
	lcd_clrscr();
	lcd_puts("Pass changed");
	lcd_gotoxy(0, 1);
	lcd_puts(password);
 252:	8f e0       	ldi	r24, 0x0F	; 15
 254:	87 bb       	out	0x17, r24	; 23
 256:	88 bb       	out	0x18, r24	; 24
 258:	60 e0       	ldi	r22, 0x00	; 0
 25a:	24 c0       	rjmp	.+72     	; 0x2a4 <get_char+0x52>
 25c:	80 e8       	ldi	r24, 0x80	; 128
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	06 2e       	mov	r0, r22
 262:	02 c0       	rjmp	.+4      	; 0x268 <get_char+0x16>
 264:	95 95       	asr	r25
 266:	87 95       	ror	r24
 268:	0a 94       	dec	r0
 26a:	e2 f7       	brpl	.-8      	; 0x264 <get_char+0x12>
 26c:	87 bb       	out	0x17, r24	; 23
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	16 c0       	rjmp	.+44     	; 0x29e <get_char+0x4c>
 272:	56 b3       	in	r21, 0x16	; 22
 274:	88 e0       	ldi	r24, 0x08	; 8
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	9c 01       	movw	r18, r24
 27a:	04 2e       	mov	r0, r20
 27c:	02 c0       	rjmp	.+4      	; 0x282 <get_char+0x30>
 27e:	35 95       	asr	r19
 280:	27 95       	ror	r18
 282:	0a 94       	dec	r0
 284:	e2 f7       	brpl	.-8      	; 0x27e <get_char+0x2c>
 286:	85 2f       	mov	r24, r21
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	82 23       	and	r24, r18
 28c:	93 23       	and	r25, r19
 28e:	89 2b       	or	r24, r25
 290:	29 f4       	brne	.+10     	; 0x29c <get_char+0x4a>
 292:	e4 e7       	ldi	r30, 0x74	; 116
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	40 83       	st	Z, r20
 298:	61 83       	std	Z+1, r22	; 0x01
 29a:	08 95       	ret
 29c:	4f 5f       	subi	r20, 0xFF	; 255
 29e:	44 30       	cpi	r20, 0x04	; 4
 2a0:	40 f3       	brcs	.-48     	; 0x272 <get_char+0x20>
 2a2:	6f 5f       	subi	r22, 0xFF	; 255
 2a4:	64 30       	cpi	r22, 0x04	; 4
 2a6:	d0 f2       	brcs	.-76     	; 0x25c <get_char+0xa>
 2a8:	e4 e7       	ldi	r30, 0x74	; 116
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	83 e0       	ldi	r24, 0x03	; 3
 2ae:	80 83       	st	Z, r24
 2b0:	84 e0       	ldi	r24, 0x04	; 4
 2b2:	81 83       	std	Z+1, r24	; 0x01
 2b4:	08 95       	ret

000002b6 <check_password>:
 2b6:	68 ed       	ldi	r22, 0xD8	; 216
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	0e 94 46 02 	call	0x48c	; 0x48c <strcmp>
 2be:	89 2b       	or	r24, r25
 2c0:	49 f4       	brne	.+18     	; 0x2d4 <check_password+0x1e>
 2c2:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_clrscr>
 2c6:	86 e7       	ldi	r24, 0x76	; 118
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_puts>
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	8a bb       	out	0x1a, r24	; 26
 2d2:	08 95       	ret
 2d4:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_clrscr>
 2d8:	81 e8       	ldi	r24, 0x81	; 129
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_puts>
 2e0:	1a ba       	out	0x1a, r1	; 26
 2e2:	08 95       	ret

000002e4 <enter_password>:
 2e4:	cf 93       	push	r28
 2e6:	c0 e0       	ldi	r28, 0x00	; 0
 2e8:	2b c0       	rjmp	.+86     	; 0x340 <enter_password+0x5c>
 2ea:	0e 94 29 01 	call	0x252	; 0x252 <get_char>
 2ee:	e4 e7       	ldi	r30, 0x74	; 116
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	80 81       	ld	r24, Z
 2f4:	21 81       	ldd	r18, Z+1	; 0x01
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	fc 01       	movw	r30, r24
 2fa:	ee 0f       	add	r30, r30
 2fc:	ff 1f       	adc	r31, r31
 2fe:	ee 0f       	add	r30, r30
 300:	ff 1f       	adc	r31, r31
 302:	e8 0f       	add	r30, r24
 304:	f9 1f       	adc	r31, r25
 306:	e0 5a       	subi	r30, 0xA0	; 160
 308:	ff 4f       	sbci	r31, 0xFF	; 255
 30a:	e2 0f       	add	r30, r18
 30c:	f1 1d       	adc	r31, r1
 30e:	80 81       	ld	r24, Z
 310:	87 37       	cpi	r24, 0x77	; 119
 312:	69 f0       	breq	.+26     	; 0x32e <enter_password+0x4a>
 314:	ec 2f       	mov	r30, r28
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	e3 52       	subi	r30, 0x23	; 35
 31a:	ff 4f       	sbci	r31, 0xFF	; 255
 31c:	80 83       	st	Z, r24
 31e:	61 e0       	ldi	r22, 0x01	; 1
 320:	8c 2f       	mov	r24, r28
 322:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_gotoxy>
 326:	8a e2       	ldi	r24, 0x2A	; 42
 328:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_putc>
 32c:	cf 5f       	subi	r28, 0xFF	; 255
 32e:	2f ef       	ldi	r18, 0xFF	; 255
 330:	8f e7       	ldi	r24, 0x7F	; 127
 332:	94 e0       	ldi	r25, 0x04	; 4
 334:	21 50       	subi	r18, 0x01	; 1
 336:	80 40       	sbci	r24, 0x00	; 0
 338:	90 40       	sbci	r25, 0x00	; 0
 33a:	e1 f7       	brne	.-8      	; 0x334 <enter_password+0x50>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <enter_password+0x5a>
 33e:	00 00       	nop
 340:	c4 30       	cpi	r28, 0x04	; 4
 342:	99 f6       	brne	.-90     	; 0x2ea <enter_password+0x6>
 344:	2f ef       	ldi	r18, 0xFF	; 255
 346:	8f ef       	ldi	r24, 0xFF	; 255
 348:	9c e2       	ldi	r25, 0x2C	; 44
 34a:	21 50       	subi	r18, 0x01	; 1
 34c:	80 40       	sbci	r24, 0x00	; 0
 34e:	90 40       	sbci	r25, 0x00	; 0
 350:	e1 f7       	brne	.-8      	; 0x34a <enter_password+0x66>
 352:	00 c0       	rjmp	.+0      	; 0x354 <enter_password+0x70>
 354:	00 00       	nop
 356:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <temporary_password+0x4>
 35a:	8d ed       	ldi	r24, 0xDD	; 221
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <check_password>
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <set_password>:
}

void set_password() {
 366:	cf 93       	push	r28
	lcd_puts("Please set your");
 368:	8d e9       	ldi	r24, 0x9D	; 157
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_puts>
	lcd_gotoxy(3, 1);
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	83 e0       	ldi	r24, 0x03	; 3
 374:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_gotoxy>
	lcd_puts("password!");
 378:	8d ea       	ldi	r24, 0xAD	; 173
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 380:	2f ef       	ldi	r18, 0xFF	; 255
 382:	8f ef       	ldi	r24, 0xFF	; 255
 384:	99 e5       	ldi	r25, 0x59	; 89
 386:	21 50       	subi	r18, 0x01	; 1
 388:	80 40       	sbci	r24, 0x00	; 0
 38a:	90 40       	sbci	r25, 0x00	; 0
 38c:	e1 f7       	brne	.-8      	; 0x386 <set_password+0x20>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <set_password+0x2a>
 390:	00 00       	nop
	_delay_ms(4000);
	lcd_clrscr();
 392:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_clrscr>
	
	uint8_t i = 0;
 396:	c0 e0       	ldi	r28, 0x00	; 0
	while (i != PASS_SIZE - 1) {
 398:	2b c0       	rjmp	.+86     	; 0x3f0 <set_password+0x8a>
		get_char();
 39a:	0e 94 29 01 	call	0x252	; 0x252 <get_char>
		char c = keypad[coordinates[0]][coordinates[1]];
 39e:	e4 e7       	ldi	r30, 0x74	; 116
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	21 81       	ldd	r18, Z+1	; 0x01
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	fc 01       	movw	r30, r24
 3aa:	ee 0f       	add	r30, r30
 3ac:	ff 1f       	adc	r31, r31
 3ae:	ee 0f       	add	r30, r30
 3b0:	ff 1f       	adc	r31, r31
 3b2:	e8 0f       	add	r30, r24
 3b4:	f9 1f       	adc	r31, r25
 3b6:	e0 5a       	subi	r30, 0xA0	; 160
 3b8:	ff 4f       	sbci	r31, 0xFF	; 255
 3ba:	e2 0f       	add	r30, r18
 3bc:	f1 1d       	adc	r31, r1
 3be:	80 81       	ld	r24, Z
		if (c != 'w') {
 3c0:	87 37       	cpi	r24, 0x77	; 119
 3c2:	69 f0       	breq	.+26     	; 0x3de <set_password+0x78>
			password[i] = c;
 3c4:	ec 2f       	mov	r30, r28
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	e8 52       	subi	r30, 0x28	; 40
 3ca:	ff 4f       	sbci	r31, 0xFF	; 255
 3cc:	80 83       	st	Z, r24
			lcd_gotoxy(0 + i, 1);
 3ce:	61 e0       	ldi	r22, 0x01	; 1
 3d0:	8c 2f       	mov	r24, r28
 3d2:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_gotoxy>
			lcd_putc('*');
 3d6:	8a e2       	ldi	r24, 0x2A	; 42
 3d8:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_putc>
			i++;
 3dc:	cf 5f       	subi	r28, 0xFF	; 255
 3de:	2f ef       	ldi	r18, 0xFF	; 255
 3e0:	8f e7       	ldi	r24, 0x7F	; 127
 3e2:	94 e0       	ldi	r25, 0x04	; 4
 3e4:	21 50       	subi	r18, 0x01	; 1
 3e6:	80 40       	sbci	r24, 0x00	; 0
 3e8:	90 40       	sbci	r25, 0x00	; 0
 3ea:	e1 f7       	brne	.-8      	; 0x3e4 <set_password+0x7e>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <set_password+0x88>
 3ee:	00 00       	nop
	lcd_puts("password!");
	_delay_ms(4000);
	lcd_clrscr();
	
	uint8_t i = 0;
	while (i != PASS_SIZE - 1) {
 3f0:	c4 30       	cpi	r28, 0x04	; 4
 3f2:	99 f6       	brne	.-90     	; 0x39a <set_password+0x34>
 3f4:	2f ef       	ldi	r18, 0xFF	; 255
 3f6:	8f ef       	ldi	r24, 0xFF	; 255
 3f8:	9c e2       	ldi	r25, 0x2C	; 44
 3fa:	21 50       	subi	r18, 0x01	; 1
 3fc:	80 40       	sbci	r24, 0x00	; 0
 3fe:	90 40       	sbci	r25, 0x00	; 0
 400:	e1 f7       	brne	.-8      	; 0x3fa <set_password+0x94>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__DATA_REGION_LENGTH__+0x4>
 404:	00 00       	nop
		_delay_ms(200);
	}
	// call delay function, so the last '*' can be shown too
	_delay_ms(2000);
	
	lcd_clrscr();
 406:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_clrscr>
	lcd_gotoxy(1, 0);
 40a:	60 e0       	ldi	r22, 0x00	; 0
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_gotoxy>
	lcd_puts("Password set!");
 412:	87 eb       	ldi	r24, 0xB7	; 183
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_puts>
 41a:	2f ef       	ldi	r18, 0xFF	; 255
 41c:	8f e7       	ldi	r24, 0x7F	; 127
 41e:	90 e7       	ldi	r25, 0x70	; 112
 420:	21 50       	subi	r18, 0x01	; 1
 422:	80 40       	sbci	r24, 0x00	; 0
 424:	90 40       	sbci	r25, 0x00	; 0
 426:	e1 f7       	brne	.-8      	; 0x420 <__DATA_REGION_LENGTH__+0x20>
 428:	00 c0       	rjmp	.+0      	; 0x42a <__DATA_REGION_LENGTH__+0x2a>
 42a:	00 00       	nop
	_delay_ms(5000);
}
 42c:	cf 91       	pop	r28
 42e:	08 95       	ret

00000430 <main>:

int main(void)
{
	DDRD = _BV(4);
 430:	80 e1       	ldi	r24, 0x10	; 16
 432:	81 bb       	out	0x11, r24	; 17

	TCCR1A = _BV(COM1B1) | _BV(WGM10);
 434:	81 e2       	ldi	r24, 0x21	; 33
 436:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = _BV(WGM12) | _BV(CS11);
 438:	8a e0       	ldi	r24, 0x0A	; 10
 43a:	8e bd       	out	0x2e, r24	; 46
	OCR1B = 128;
 43c:	80 e8       	ldi	r24, 0x80	; 128
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	99 bd       	out	0x29, r25	; 41
 442:	88 bd       	out	0x28, r24	; 40

	lcd_init(LCD_DISP_ON);
 444:	8c e0       	ldi	r24, 0x0C	; 12
 446:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_init>
	lcd_clrscr();
 44a:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_clrscr>
	
	
	//DDR and PORT setup for LEDS (or buzzer)
	SIGNAL_DDR = 0x00;
 44e:	1a ba       	out	0x1a, r1	; 26
	SIGNAL_PRT = 0x00;
 450:	1b ba       	out	0x1b, r1	; 27
	
	set_password();
 452:	0e 94 b3 01 	call	0x366	; 0x366 <set_password>
	
	while (1) {
		if (SIGNAL_DDR & 0x01) {
 456:	d0 9b       	sbis	0x1a, 0	; 26
 458:	07 c0       	rjmp	.+14     	; 0x468 <__stack+0x9>
			lcd_clrscr();
 45a:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_clrscr>
			lcd_puts("NO");
 45e:	85 ec       	ldi	r24, 0xC5	; 197
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_puts>
 466:	08 c0       	rjmp	.+16     	; 0x478 <__stack+0x19>
			} else {
			lcd_clrscr();
 468:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_clrscr>
			lcd_puts("Enter password:");
 46c:	88 ec       	ldi	r24, 0xC8	; 200
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_puts>
			enter_password();
 474:	0e 94 72 01 	call	0x2e4	; 0x2e4 <enter_password>
 478:	2f ef       	ldi	r18, 0xFF	; 255
 47a:	8f ef       	ldi	r24, 0xFF	; 255
 47c:	90 ee       	ldi	r25, 0xE0	; 224
 47e:	21 50       	subi	r18, 0x01	; 1
 480:	80 40       	sbci	r24, 0x00	; 0
 482:	90 40       	sbci	r25, 0x00	; 0
 484:	e1 f7       	brne	.-8      	; 0x47e <__stack+0x1f>
 486:	00 c0       	rjmp	.+0      	; 0x488 <__stack+0x29>
 488:	00 00       	nop
 48a:	e5 cf       	rjmp	.-54     	; 0x456 <main+0x26>

0000048c <strcmp>:
 48c:	fb 01       	movw	r30, r22
 48e:	dc 01       	movw	r26, r24
 490:	8d 91       	ld	r24, X+
 492:	01 90       	ld	r0, Z+
 494:	80 19       	sub	r24, r0
 496:	01 10       	cpse	r0, r1
 498:	d9 f3       	breq	.-10     	; 0x490 <strcmp+0x4>
 49a:	99 0b       	sbc	r25, r25
 49c:	08 95       	ret

0000049e <_exit>:
 49e:	f8 94       	cli

000004a0 <__stop_program>:
 4a0:	ff cf       	rjmp	.-2      	; 0x4a0 <__stop_program>
